version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: clipers-postgres
    environment:
      POSTGRES_DB: clipers_db
      POSTGRES_USER: clipers_user
      POSTGRES_PASSWORD: clipers_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - clipers-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clipers_user -d clipers_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: clipers-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - clipers-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ para colas de mensajes
  rabbitmq:
    image: rabbitmq:3-management
    container_name: clipers-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: clipers
      RABBITMQ_DEFAULT_PASS: clipers123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - clipers-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Spring Boot
  clipers-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: clipers-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/clipers_db
      SPRING_DATASOURCE_USERNAME: clipers_user
      SPRING_DATASOURCE_PASSWORD: clipers_password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: clipers
      SPRING_RABBITMQ_PASSWORD: clipers123
      JWT_SECRET: mySecretKey123456789012345678901234567890123456789012345678901234567890
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
    networks:
      - clipers-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  clipers-network:
    driver: bridge
